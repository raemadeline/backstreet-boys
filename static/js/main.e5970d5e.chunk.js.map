{"version":3,"sources":["media-play.svg","media-pause.svg","media-step-backward.svg","media-step-forward.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","tracks","currentIndex","playing","previousTrack","setState","nextTrack","skipToTrack","index","togglePlayPause","$","ajax","type","url","dataType","done","data","document","bind","e","which","preventDefault","prevProps","prevState","player","getElementById","this","length","load","addEventListener","play","pause","track","i","imageUrl","title","key","onClick","src","alt","className","map","renderTrack","nextDisabled","previousDisabled","disabled","stepBackwards","stepForwards","trackCount","media","image","currentTrack","mediaUrl","startsWith","id","splitTitle","split","renderControls","renderCurrentlyPlaying","renderTrackList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5970d5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/media-play.8ea16cdc.svg\";","module.exports = __webpack_public_path__ + \"static/media/media-pause.624c0026.svg\";","module.exports = __webpack_public_path__ + \"static/media/media-step-backward.b7e10ab4.svg\";","module.exports = __webpack_public_path__ + \"static/media/media-step-forward.26c8b12f.svg\";","import React from 'react';\nimport './App.css';\nimport $ from 'jquery';\nimport play from './media-play.svg';\nimport pause from './media-pause.svg';\nimport stepBackwards from './media-step-backward.svg';\nimport stepForwards from './media-step-forward.svg';\n\nclass App extends React.Component {\n  state = {\n    tracks: [],\n    currentIndex: 0,\n    playing: false\n  }\n\n  componentDidMount() {\n    $.ajax({\n      type: \"GET\",\n      url: \"https://s3-us-west-2.amazonaws.com/anchor-website/challenges/bsb.json\",\n      dataType: \"JSON\"\n    }).done((data) => {\n      this.setState({ tracks: data.tracks })\n    })\n\n    $(document).bind('keydown', (e) => {\n      //space bar\n      if (e.which === 32){\n        e.preventDefault();\n        this.togglePlayPause();\n      }\n      //right arrow\n      if (e.which === 39) {\n        this.nextTrack();\n      }\n      //left arrow\n      if (e.which === 37) {\n        this.previousTrack();\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const player = document.getElementById(\"media-player\")\n\n    // initial data fetch, load first song and set eventlistener for end\n    if (this.state.tracks.length > 0 && prevState.tracks.length === 0) {\n      player.load();\n      player.addEventListener('ended', () => { this.nextTrack() });\n    }\n\n    // track changes (next, back, jump to song)\n    if (this.state.currentIndex !== prevState.currentIndex) {\n      player.load();\n      player.addEventListener('ended', () => { this.nextTrack() });\n\n      if (this.state.playing) {\n        document.getElementById(\"media-player\").play();\n      }\n    }\n\n    // play\n    if (this.state.playing && !prevState.playing) {\n      player.play();\n    }\n\n    // pause\n    if (prevState.playing && !this.state.playing) {\n      player.pause();\n    }\n  }\n\n  previousTrack = () => {\n    this.setState({ currentIndex: this.state.currentIndex - 1 });\n  }\n\n  nextTrack = () => {\n    this.setState({ currentIndex: this.state.currentIndex + 1 });\n  }\n\n  skipToTrack = (index) => {\n    this.setState({ currentIndex: index });\n  }\n\n  togglePlayPause = () => {\n    this.setState({ playing: !this.state.playing });\n  }\n\n  renderTrack(track, i) {\n    const { imageUrl, title} = track;\n\n    return <li key={i} onClick={() => this.skipToTrack(i)}>\n      <label>{title}</label>\n      <img src={imageUrl} alt={title}/>\n    </li>\n  }\n\n  renderTrackList() {\n    return <ul className=\"track-list\">\n      {this.state.tracks.map((track, i) => {\n        return this.renderTrack(track, i);\n      })}\n    </ul>\n  }\n\n  renderControls() {\n    const nextDisabled = this.state.currentIndex === this.state.tracks.length - 1;\n    const previousDisabled = this.state.currentIndex === 0;\n\n    return <div className=\"controls\">\n      <button\n        disabled={previousDisabled}\n        onClick={this.previousTrack}>\n          <img src={stepBackwards} alt=\"Previous\" />\n      </button>\n      <button\n        onClick={this.togglePlayPause}>\n        {this.state.playing ?\n          <img src={pause} alt=\"Pause\" /> :\n          <img src={play} alt=\"Play\" />}\n      </button>\n      <button\n        disabled={nextDisabled}\n        onClick={this.nextTrack}>\n          <img src={stepForwards} alt=\"Next\" />\n      </button>\n    </div>\n  }\n\n  renderCurrentlyPlaying() {\n    const trackCount = this.state.tracks.length\n    // data hasn't loaded, or the index got out of bounds somehow\n    if (trackCount < 1 || this.state.currentIndex >= trackCount) {\n      return null;\n    }\n\n    const currentTrack = this.state.tracks[this.state.currentIndex];\n    const { imageUrl, mediaUrl, title} = currentTrack;\n\n    let media, image;\n    if(mediaUrl.startsWith(\"https://audio-ssl.itunes.apple.com/\")) {\n      // audio\n      media = <audio id=\"media-player\">\n        <source src={mediaUrl} />\n        Your browser does not support the audio element.\n      </audio>\n      image = <img className=\"album-artwork\" src={imageUrl} alt={title} />\n    } else {\n      // video\n      media = <video id=\"media-player\">\n        <source src={mediaUrl} />\n        Your browser does not support the video tag.\n      </video>\n      image = null;\n    }\n\n    const splitTitle = title.split(\" by \");\n    return <div className=\"player\">\n      {media}\n      {image}\n      <label className=\"song-title\">{splitTitle[0]}</label>\n      <label className=\"song-artist\">{splitTitle[1]}</label>\n      {this.renderControls()}\n    </div>;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"main\">\n          {this.renderCurrentlyPlaying()}\n          {this.renderTrackList()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}